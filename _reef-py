#!/bin/bash
###############################################################
# Bash completion script for reef-py command line function
# it should be installed in 
#    /usr/share/bash-completion/completions/_reef-pi
# so that it's available in all bash terminal shells
###############################################################
_set_option_variables() {
    if [[ -z "${REEF_PY_PATH}" ]]; then
        echo "REEF_PY_PATH environment variable is not set, please fix and retry"
        return 1
    fi

    API_OPTIONS="buckets list show --help" # create update delete
    LIST_BUCKETS="analog_inputs ato doser drivers equipment errors inlets jacks lightings macro outlets ph_calibration ph_readings phprobes settings temperature timers"
    OPTIONAL_ARGUMENTS="--pretty --help --value --sep --last"
    LIST_OPTIONS="${LIST_BUCKETS} ${OPTIONAL_ARGUMENTS}"
    SHOW_BUCKETS="${LIST_BUCKETS} ato_usage doser_usage temperature_current temperature_usage temperature_read"
    SHOW_OPTIONS="${SHOW_BUCKETS} ${OPTIONAL_ARGUMENTS}"
}

# helper logging method
_e() { echo "$1" >> log; }

_get_buckets() 
{
    BUCKETS=$SHOW_BUCKETS
}

_get_item_type() 
{
    case ${ITEM} in
        ph_calibration | ph_readings) #convert the oddball ph entries
            ITEM_TYPE="phprobes"
        ;;
        reef-pi | system | errors) #buckets without items
            ITEM_TYPE=""
        ;;
        *)
            ITEM_TYPE=$ITEM
        ;;
    esac

    #ITEM_TYPE=$(echo $ITEM_TYPE | tr "_" "\n") #effectively strip off everything after the underscore
    ITEM_TYPE=${ITEM_TYPE%_*} #truncate after underscore

}

_get_reef_pi_configured_items()
{
    _e "Item Type: ${ITEM_TYPE}"
    if [[ ! -z "${ITEM_TYPE}" ]]; then
        _e "Calling API to get suggestions"
        CONFIGURED_ITEM_SUGGESTIONS="$($REEF_PY_PATH/reef-py.py list $ITEM_TYPE --value id,name --sep ' - ')"
    fi
    _e "Item suggestions: $CONFIGURED_ITEM_SUGGESTIONS"
}

_get_configured_item_suggestions()
{    
    local CONFIGURED_ITEM_SUGGESTIONS 
    _get_reef_pi_configured_items

    _e "Configured items: $CONFIGURED_ITEM_SUGGESTIONS"
    local IFS=$'\n'      # Change IFS to new line - convert new lines to array
    local suggestions=($CONFIGURED_ITEM_SUGGESTIONS)

    if [ "${#suggestions[@]}" == "1" ]; then #If array is size one, then get the leading number
        local number="${suggestions[0]/%\ */}"
        COMPREPLY=("$number")
    else
        for i in "${!suggestions[@]}"; do # pad entries to screen width for 1 option per line
            suggestions[$i]="$(printf '%*s' "-$COLUMNS"  "${suggestions[$i]}")"
        done
        COMPREPLY=("${suggestions[@]}")
    fi
}

_get_item_options()
{
    local ITEM_TYPE ITEM
    ITEM=${PREV}
    _get_item_type
    _e "[GIO] ItemType:$ITEM_TYPE Item:$ITEM"
    _get_configured_item_suggestions
}

_list_buckets()
{
    COMPREPLY=($(compgen -W "${LIST_BUCKETS}" -- ${CUR}))
}

_show_buckets()
{
    COMPREPLY=($(compgen -W "${SHOW_BUCKETS}" -- ${CUR}))
}

_api_list_handler()
{
    case ${COMP_CWORD} in
        2) # completing 3rd term
            _list_buckets
            ;;
        *)
            COMPREPLY=()
            ;;
    esac  
}

_bucket_item_handler()
{
    case ${COMP_CWORD} in
        2) # completing 3rd term
            _show_buckets
            ;;
        3) # completing 4th term
            _get_item_options
            ;;
        *)
            COMPREPLY=($(compgen -W "${OPTIONAL_ARGUMENTS}" -- ${CUR}))
            ;;
    esac  
}

_api_show_handler()
{
    _bucket_item_handler
}

_py_handler()
{
    local action
    if [[ "${#COMP_WORDS[@]}" -gt "1" ]]; then
        action=${COMP_WORDS[1]}
    fi
    case ${COMP_CWORD} in
        1) # two arguments
            COMPREPLY=($(compgen -W "$API_OPTIONS" -- ${CUR})) ;;
        2 | 3 | 4 | 5 | 6 ) # three or more
            case ${action} in
                buckets)  return  ;;
                list)     _api_list_handler ;;
                show)     _api_show_handler ;;
            esac
            ;;
        *) 
            COMPREPLY=()
            ;;
    esac 
}

_remove_elements_from_array()
{
    declare -n source_array="$1"
    for target in "${ELEMENTS_TO_REMOVE[@]}"; do
        for i in "${!source_array[@]}"; do
            if [[ $target = ${source_array[i]} ]]; then
                unset 'source_array[i]'
            fi
        done
    done
}

_build_used_arguments_in_current_command_line()
{
    declare -n options_array="$1"
    # iterate throught the existing command line and remove options already used
   for argument in ${COMP_WORDS[*]}; do
        for i in "${!options_array[@]}"; do
            if [[ ${options_array[i]} = ${argument} ]]; then 
                ELEMENTS_TO_REMOVE+=(${argument})
            fi 
        done
    done
}

_get_valid_options()
{
   declare -n options="$1"
    local ELEMENTS_TO_REMOVE=()
    _build_used_arguments_in_current_command_line options
    _remove_elements_from_array options
}

_reef-py_completions()
{
    if _set_option_variables ; then
        local CUR PREV category
        CUR=${COMP_WORDS[COMP_CWORD]}
        PREV=${COMP_WORDS[COMP_CWORD-1]}

        _py_handler
    fi
}
complete -F _reef-py_completions reef-py.py